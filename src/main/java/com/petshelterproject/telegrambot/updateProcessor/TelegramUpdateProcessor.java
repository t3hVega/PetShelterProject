package com.petshelterproject.telegrambot.updateProcessor;

import com.petshelterproject.model.User;
import com.petshelterproject.repository.UserRepository;
import com.petshelterproject.telegrambot.messageProcessor.UserMessageProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Component
public class TelegramUpdateProcessor {

    @Autowired
    private UserRepository userRepository;
    private final UserMessageProcessor messageProcessor;

    public TelegramUpdateProcessor(UserMessageProcessor messageProcessor) {
        this.messageProcessor = messageProcessor;
    }

    public SendMessage revert(Long chatId) {
        SendMessage revert = new SendMessage();
        boolean isInCatShelter = userRepository.findByChatId(chatId).isInCatShelter();
        String lastMessage = userRepository.findByChatId(chatId).getLastMessage();
        revert.setChatId(chatId);
        switch (lastMessage) {
            case ("\uD83D\uDC31 –ö–æ—à–∫—É"): {
                revert = messageProcessor.secondStageMenu(chatId, "\uD83D\uDC31 –ö–æ—à–∫—É");
                break;
            }
            case ("\uD83D\uDC36 –°–æ–±–∞–∫—É"): {
                revert = messageProcessor.secondStageMenu(chatId, "\uD83D\uDC36 –°–æ–±–∞–∫—É");
                break;
            }
            case ("‚Ñπ\uFE0F –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ"): {
                revert =  messageProcessor.shelterInfoMenu(chatId);
                break;
            }
            case("‚ùì –ö–∞–∫ –∑–∞–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ –ø—Ä–∏—é—Ç–∞"): {
                if(isInCatShelter) revert = messageProcessor.catAdoptionAssistMenu(chatId);
                else revert = messageProcessor.dogAdoptionAssistMenu(chatId);
                break;
            }
            case("–í–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ"): {
                revert =  messageProcessor.shelterInfoMenu(chatId);
                userStatusUpdate(chatId, isInCatShelter,"‚Ñπ\uFE0F –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ");
                break;
            }
            case("\uD83D\uDC3E –ü—Ä–∏—Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–æ–º—Ü–µ"): {
                revert = messageProcessor.reportMenu(chatId);
                break;
            }
            case ("–ü—Ä–∏—Å–ª–∞–Ω –æ—Ç—á–µ—Ç"): {
                if (userRepository.findByChatId(chatId).isInCatShelter()) {
                    revert = messageProcessor.secondStageMenu(chatId, "\uD83D\uDC31 –ö–æ—à–∫—É");
                } else {
                    revert = messageProcessor.secondStageMenu(chatId, "\uD83D\uDC36 –°–æ–±–∞–∫—É");
                }
                break;
            }
            case ("–û–¥–æ–±—Ä–∏—Ç—å"): {
                revert = enterData(chatId, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–º —Ö–æ–∑—è–∏–Ω–æ–º –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
                break;
            }
            case ("–û—Ç–∫–ª–æ–Ω–∏—Ç—å"): {
                revert = enterData(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É —Ö–æ–∑—è–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ –æ—Ç—á–∞–∏–≤–∞—Ç—å—Å—è." +
                        " –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —É–∫–∞–∂—É—Ç –Ω–∞—à–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ —Ö–æ–∑—è–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–∞." +
                        "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –æ—Ç–Ω–µ—Å–∏—Ç–µ—Å—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –æ—Ç—á–µ—Ç–æ–≤ –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –±–æ–ª—å—à–µ —É–¥–µ–ª—è–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏—è —Å–≤–æ–µ–º—É –º–∞–ª–µ–Ω—å–∫–æ–º—É –¥—Ä—É–≥—É", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
                break;
            }
            case ("–ü—Ä–æ–¥–ª–∏—Ç—å –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–∞ 14 –¥–Ω–µ–π"): {
                revert = enterData(chatId, "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
                break;
            }
            case ("–ü—Ä–æ–¥–ª–∏—Ç—å –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–∞ –º–µ—Å—è—Ü"): {
                revert = enterData(chatId, "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–∞ –º–µ—Å—è—Ü", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
                break;
            }
            default:
        }
        return revert;
    }

    public SendMessage back(Long chatId) {
        SendMessage back = new SendMessage();
        boolean isInCatShelter = userRepository.findByChatId(chatId).isInCatShelter();
        String lastMessage = userRepository.findByChatId(chatId).getLastMessage();
        back.setChatId(chatId);
        switch (lastMessage) {
            case("‚ùì –ö–∞–∫ –∑–∞–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ –ø—Ä–∏—é—Ç–∞"),
                    ("‚Ñπ\uFE0F –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ"),
                    ("üêæ –ü—Ä–∏—Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–æ–º—Ü–µ"),
                    ("–ü—Ä–∏—Å–ª–∞–Ω –æ—Ç—á–µ—Ç"),
                    ("–ù–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ø–∏—Ç–æ–º–µ—Ü"),
                    ("–í–≤–µ–¥–µ–Ω–æ –∏–º—è"),
                    ("\uD83D\uDCDD –í–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏"): {
                if(isInCatShelter) {
                    back = messageProcessor.secondStageMenu(chatId, "\uD83D\uDC31 –ö–æ—à–∫—É");
                    userStatusUpdate(chatId, true, "\uD83D\uDC31 –ö–æ—à–∫—É");
                }
                else {
                    back = messageProcessor.secondStageMenu(chatId, "\uD83D\uDC36 –°–æ–±–∞–∫—É");
                    userStatusUpdate(chatId, false, "\uD83D\uDC36 –°–æ–±–∞–∫—É");
                }
                break;
            }
            default:
        }
        return back;
    }

    private SendMessage enterData(Long chatId, String text, String buttonText) {
        SendMessage enterData = new SendMessage();
        enterData.setChatId(chatId);
        enterData.setText(text);
        List<KeyboardButton> firstRow = List.of(
                new KeyboardButton(buttonText)
        );
        List<List<KeyboardButton>> buttonsToAdd = Arrays.asList(
                firstRow
        );
        enterData.setReplyMarkup(replyKeyboardMarkup(buttonsToAdd));
        return enterData;
    }

    private void userStatusUpdate (Long chatId, boolean inCatShelter, String lastMessage) {
        User user = userRepository.findByChatId(chatId);
        user.setInCatShelter(inCatShelter);
        user.setLastMessage(lastMessage);
        userRepository.save(user);
    }

    private ReplyKeyboardMarkup replyKeyboardMarkup(List<List<KeyboardButton>> buttonsToAdd) {
        List<KeyboardRow> rows = new ArrayList<>();
        for (int i = 0; i < buttonsToAdd.size(); i++) {
            rows.add(new KeyboardRow(buttonsToAdd.get(i)));
        }
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        replyKeyboardMarkup.setSelective(true);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);
        replyKeyboardMarkup.setKeyboard(rows);
        return replyKeyboardMarkup;
    }

}
